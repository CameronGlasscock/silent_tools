#!/usr/bin/env python

import distutils.spawn
import os
import sys
sys.path.append(os.path.dirname(distutils.spawn.find_executable("silent_tools.py")))
import silent_tools
from silent_tools import eprint
import re

# Don't throw an error when someone uses head
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE, SIG_DFL) 

if (len(sys.argv) == 1):
    eprint("")
    eprint('silentsequence by bcov - extract the sequences from a silent file')
    eprint("Usage:")
    eprint("        silentsequence myfile.silent > myfile.seq")
    sys.exit(1)

silent_file = sys.argv[1]

silent_index = silent_tools.get_silent_index( silent_file )

with open(silent_file) as sf:
    for tag in silent_index['tags']:

        structure = silent_tools.get_silent_structure_file_open( sf, silent_index, tag )

        full_sequence = None
        chain_endings = None

        for line in structure:
            if ( line.startswith("ANNOTATED_SEQUENCE") ):
                tmp = line
                tmp = tmp.strip()
                tmp = tmp.split()[1]
                full_sequence = re.sub(r"\[[^]]*\]", "", tmp)
            if ( line.startswith("CHAIN_ENDINGS") ):
                tmp = line
                tmp = tmp.strip()
                tmp = tmp.split()
                chain_endings = [int(x) for x in tmp[1:len(tmp)-1] ]

        bad = False
        if ( full_sequence is None ):
            eprint("silentsequence: no ANNOTATED_SEQUENCE for tag %s"%tag)
            bad = True
        if ( chain_endings is None ):
            eprint("silentsequence: no CHAIN_ENDINGS for tag %s"%tag)
            bad = True

        if (bad):
            continue

        sequence_chunks = []
        last_end = 0
        for end in chain_endings + [len(full_sequence)]:
            sequence_chunks.append( full_sequence[last_end:end] )
            last_end = end

        sys.stdout.write(" ".join(sequence_chunks) + " " + tag + "\n")
        sys.stdout.flush()


